{"version":3,"sources":["components/Card/CardWrapper.tsx","constants.ts","utils/index.tsx","reducers/characterReducers.ts","contexts/CharacterContext.tsx","components/Card/CardFooter.tsx","components/Card/CardHeader.tsx","components/Card/CardItem.tsx","components/LabelNumber.tsx","components/MainCard.tsx","reducers/spellsReducer.ts","contexts/SpellsContext.tsx","hooks/UseSpell.tsx","components/OptionMenu.tsx","components/SpellCard.tsx","App.tsx","serviceWorker.ts","theme.ts","index.tsx"],"names":["CardWrapper","children","props","Stack","spacing","boxShadow","border","borderRadius","borderColor","parseNum","num","value","parseInt","calculateSpell","newState","character","index","enchantment","increment","base","pips","damages","calculateDamage","bases","percentModifier","flatDamage","buffs","dam","Math","floor","Number","i","length","characterReducer","state","action","type","split","map","element","b","buffsRaw","Error","initState","pierce","shields","sheldsRaw","CharacterContext","createContext","dispatch","CharacterContextProvider","useReducer","useEffect","character_raw","localStorage","getItem","character_parsed","JSON","parse","setItem","stringify","Provider","CardFooter","px","pb","pt","CardHeader","p","borderBottom","CardItem","mb","LabelNumber","Box","Text","Input","MainCard","useContext","textAlign","fontSize","onChange","event","preventDefault","target","Textarea","height","resize","placeholder","Button","onClick","mx","w","spellsReducer","id","v4","name","push","spell","spells","SpellsContext","SpellsContextProvider","spells_raw","spells_parsed","spellReducer","calculateAllSpell","undefined","OptionMenu","Menu","aria-label","size","SpellCard","spellsDispatch","React","newSpell","useSpell","Flex","mr","spellCheck","onFocus","select","pr","key","ml","flexWrap","wordBreak","my","fontWeight","toLocaleString","useGrouping","App","spellCards","maxW","pl","py","Heading","color","float","minW","wrap","IconButton","variantColor","m","icon","Boolean","window","location","hostname","match","customTheme","theme","ReactDOM","render","StrictMode","ThemeProvider","CSSReset","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cb99955b.chunk.js","sourcesContent":["import { Stack, StackProps } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport { BORDER, BORDER_COLOR } from \"../../constants\";\ntype CardWrapperProps = {} & StackProps;\n\nexport const CardWrapper: React.FC<CardWrapperProps> = ({\n  children,\n  ...props\n}) => {\n  return (\n    <Stack\n      spacing=\"5px\"\n      boxShadow=\"md\"\n      border={BORDER}\n      borderRadius=\"10px\"\n      borderColor={BORDER_COLOR}\n      {...props}\n    >\n      {children}\n    </Stack>\n  );\n};\n","export const MAX_SPELLS = 12;\nexport const BORDER_COLOR = \"gray.300\";\nexport const BORDER = \"solid 3px\";\n","import { v4 } from \"uuid\";\nimport { CharacterType, SpellType } from \"../types\";\n\nexport const parseBuffs = (text: string) => {\n  let buffs = text.split(\"\\n\");\n  return buffs.map((element) => {\n    const b = parseInt(element.split(\" \")[0]);\n    if (!b) {\n      return 0;\n    }\n    return b;\n  });\n};\n\nexport const parseNum = (num: string) => {\n  const value = parseInt(num);\n  return value ? value : 0;\n};\n\nexport const calculateAllSpell = (\n  newState: SpellType,\n  character: CharacterType\n) => {\n  for (let i = 0; i < newState.bases.length; i++) {\n    calculateSpell(newState, character, i);\n  }\n};\n\nexport const calculateSpell = (\n  newState: SpellType,\n  character: CharacterType,\n  index: number\n) => {\n  const enchantment = newState.enchantment ? newState.enchantment : 0;\n  const increment = newState.increment\n    ? newState.increment.base * newState.increment.pips\n    : 0;\n  newState.damages[index] = calculateDamage(\n    character,\n    newState.bases[index] + enchantment + increment\n  );\n  return newState;\n};\n\nexport const calculateDamage = (character: CharacterType, base: number) => {\n  const { percentModifier, flatDamage, buffs } = character;\n  let dam = Math.floor(\n    (1 + Number(percentModifier) / 100) * Number(base) + Number(flatDamage)\n  );\n  for (let i = 0; i < buffs.length; i++) {\n    dam *= 1 + buffs[i] / 100;\n    dam = Math.floor(dam);\n  }\n  return dam;\n};\n\nexport const createSpell = (): SpellType => ({\n  id: v4(),\n  name: \"Untitled\",\n  bases: [0],\n  damages: [0],\n});\n","import { CharacterType } from \"../types\";\nimport { parseBuffs, parseNum } from \"../utils\";\n\nexport type CharacterActions =\n  | { type: \"change_percent\"; value: string }\n  | { type: \"change_flat\"; value: string }\n  | {\n      type: \"change_buffs\";\n      value: string;\n    }\n  | {\n      type: \"load\";\n      character: CharacterType;\n    };\n\nexport const characterReducer = (\n  state: CharacterType,\n  action: CharacterActions\n): CharacterType => {\n  switch (action.type) {\n    case \"change_percent\": {\n      const newState = { ...state };\n      newState.percentModifier = parseNum(action.value);\n      return newState;\n    }\n    case \"change_flat\": {\n      const newState = { ...state };\n      newState.flatDamage = parseNum(action.value);\n\n      return newState;\n    }\n    case \"change_buffs\": {\n      const newState = { ...state };\n      newState.buffs = parseBuffs(action.value);\n      newState.buffsRaw = action.value;\n\n      return newState;\n    }\n    case \"load\": {\n      return action.character;\n    }\n    default: {\n      throw new Error(\"Error\");\n    }\n  }\n};\n","import React, { createContext, useEffect, useReducer } from \"react\";\nimport {\n  CharacterActions,\n  characterReducer,\n} from \"../reducers/characterReducers\";\nimport { CharacterType } from \"../types\";\n\nconst initState: CharacterType = {\n  percentModifier: 0,\n  flatDamage: 0,\n  pierce: 0,\n  buffs: [],\n  buffsRaw: \"\",\n  shields: [],\n  sheldsRaw: \"\",\n};\n\nexport const CharacterContext = createContext<{\n  character: CharacterType;\n  dispatch: React.Dispatch<CharacterActions>;\n}>({ character: initState, dispatch: () => null });\n\nexport const CharacterContextProvider: React.FC = ({ children }) => {\n  const [character, dispatch] = useReducer(characterReducer, initState);\n\n  // Load character from storage\n  useEffect(() => {\n    const character_raw = localStorage.getItem(\"character\");\n    if (character_raw) {\n      const character_parsed: CharacterType = JSON.parse(character_raw);\n      dispatch({ type: \"load\", character: character_parsed });\n    }\n  }, []);\n\n  // Save character to storage\n  useEffect(() => {\n    localStorage.setItem(\"character\", JSON.stringify(character));\n  }, [character]);\n\n  return (\n    <CharacterContext.Provider value={{ character, dispatch }}>\n      {children}\n    </CharacterContext.Provider>\n  );\n};\n","import { Stack, StackProps } from \"@chakra-ui/core\";\nimport React from \"react\";\ntype CardFooter = {} & StackProps;\n\nexport const CardFooter: React.FC<CardFooter> = ({ children, ...props }) => {\n  return (\n    <Stack spacing=\"10px\" px=\"10px\" pb=\"10px\" pt=\"5px\" {...props}>\n      {children}\n    </Stack>\n  );\n};\n","import { Stack, StackProps } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport { BORDER, BORDER_COLOR } from \"../../constants\";\ntype CardHeader = {} & StackProps;\n\nexport const CardHeader: React.FC<CardHeader> = ({ children, ...props }) => {\n  return (\n    <Stack\n      p=\"10px\"\n      borderBottom={BORDER}\n      borderColor={BORDER_COLOR}\n      spacing=\"10px\"\n      {...props}\n    >\n      {children}\n    </Stack>\n  );\n};\n","import { BoxProps, Stack } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport { BORDER, BORDER_COLOR } from \"../../constants\";\ntype CardItem = {} & BoxProps;\n\nexport const CardItem: React.FC<CardItem> = ({ children, ...props }) => {\n  return (\n    <Stack\n      spacing=\"5px\"\n      px=\"10px\"\n      pb=\"10px\"\n      mb=\"5px\"\n      borderBottom={BORDER}\n      borderColor={BORDER_COLOR}\n      {...props}\n    >\n      {children}\n    </Stack>\n  );\n};\n","import { Box, Input, InputProps, Text } from \"@chakra-ui/core\";\nimport React from \"react\";\n\nexport const LabelNumber: React.FC<InputProps> = ({ children, ...props }) => {\n  return (\n    <Box>\n      <Text>{children}</Text>\n      <Input {...props} />\n    </Box>\n  );\n};\n","import { Button, Text, Textarea } from \"@chakra-ui/core\";\nimport React, { useContext } from \"react\";\nimport { CharacterContext } from \"../contexts/CharacterContext\";\nimport { CardFooter } from \"./Card/CardFooter\";\nimport { CardHeader } from \"./Card/CardHeader\";\nimport { CardItem } from \"./Card/CardItem\";\nimport { CardWrapper } from \"./Card/CardWrapper\";\nimport { LabelNumber } from \"./LabelNumber\";\n\ntype MainCardProps = {};\n\nexport const MainCard: React.FC<MainCardProps> = () => {\n  const { character, dispatch } = useContext(CharacterContext);\n  return (\n    <CardWrapper>\n      <CardHeader>\n        <Text textAlign=\"center\" fontSize=\"20px\">\n          Character Stats\n        </Text>\n      </CardHeader>\n      <CardItem>\n        <LabelNumber\n          value={character.percentModifier}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            event.preventDefault();\n            dispatch({ type: \"change_percent\", value: event.target.value });\n          }}\n        >\n          Percent Modifier\n        </LabelNumber>\n        <LabelNumber\n          value={character.flatDamage}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            event.preventDefault();\n            dispatch({ type: \"change_flat\", value: event.target.value });\n          }}\n        >\n          Flat Damage\n        </LabelNumber>\n      </CardItem>\n      <CardItem>\n        <Text fontSize=\"20px\" textAlign=\"center\">\n          + / - Charms\n        </Text>\n      </CardItem>\n      <CardFooter>\n        <Textarea\n          height=\"212px\"\n          resize=\"vertical\"\n          placeholder=\"[percent] [name]\"\n          value={character.buffsRaw}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            dispatch({ type: \"change_buffs\", value: event.target.value });\n          }}\n        />\n        <Button\n          onClick={() => dispatch({ type: \"change_buffs\", value: \"\" })}\n          mx=\"auto\"\n          w=\"40%\"\n        >\n          Clear\n        </Button>\n      </CardFooter>\n    </CardWrapper>\n  );\n};\n","import { SpellType } from \"../types\";\nimport { createSpell } from \"../utils\";\n\nexport type SpellsAction =\n  | {\n      type: \"add_spell\";\n    }\n  | {\n      type: \"delete_spell\";\n      index: number;\n    }\n  | {\n      type: \"update_spell\";\n      spell: SpellType;\n      index: number;\n    }\n  | {\n      type: \"load\";\n      spells: SpellType[];\n    };\n\nexport const spellsReducer = (\n  state: SpellType[],\n  action: SpellsAction\n): SpellType[] => {\n  switch (action.type) {\n    case \"add_spell\": {\n      return [...state, createSpell()];\n    }\n    case \"delete_spell\": {\n      const newState = [];\n\n      for (let i = 0; i < state.length; i++) {\n        if (action.index !== i) {\n          newState.push(state[i]);\n        }\n      }\n\n      return newState;\n    }\n    case \"update_spell\": {\n      const newState = [...state];\n      newState[action.index] = action.spell;\n\n      return newState;\n    }\n    case \"load\": {\n      return action.spells;\n    }\n    default: {\n      throw new Error(\"Error\");\n    }\n  }\n};\n","import React, { createContext, useEffect, useReducer } from \"react\";\nimport { SpellsAction, spellsReducer } from \"../reducers/spellsReducer\";\nimport { SpellType } from \"../types\";\n\nexport const SpellsContext = createContext<{\n  spells: SpellType[];\n  dispatch: React.Dispatch<SpellsAction>;\n}>({ spells: [], dispatch: () => null });\n\nexport const SpellsContextProvider: React.FC = ({ children }) => {\n  const [spells, dispatch] = useReducer(spellsReducer, []);\n\n  // Load spells from storage\n  useEffect(() => {\n    const spells_raw = localStorage.getItem(\"spells\");\n    if (spells_raw) {\n      const spells_parsed: SpellType[] = JSON.parse(spells_raw);\n      dispatch({ type: \"load\", spells: spells_parsed });\n    }\n  }, []);\n\n  // Save spells to storage\n  useEffect(() => {\n    localStorage.setItem(\"spells\", JSON.stringify(spells));\n  }, [spells]);\n\n  return (\n    <SpellsContext.Provider value={{ spells, dispatch }}>\n      {children}\n    </SpellsContext.Provider>\n  );\n};\n","import React, { useContext, useEffect } from \"react\";\nimport { CharacterContext } from \"../contexts/CharacterContext\";\nimport { SpellsContext } from \"../contexts/SpellsContext\";\nimport { CharacterType, SpellType } from \"../types\";\nimport { calculateAllSpell, parseNum } from \"../utils\";\n\nexport type SpellActions =\n  | {\n      type: \"change_name\";\n      name: string;\n    }\n  | {\n      type: \"change_base\";\n      index: number;\n      value: string;\n    }\n  | {\n      type: \"add_base\";\n    }\n  | {\n      type: \"calculate\";\n      character: CharacterType;\n    }\n  | {\n      type: \"toggle_enchantment\";\n    }\n  | {\n      type: \"change_enchantment\";\n      value: string;\n    }\n  | {\n      type: \"toggle_increment\";\n    }\n  | {\n      type: \"change_increment\";\n      pips?: string;\n      base?: string;\n    }\n  | {\n      type: \"delete_spell\";\n    };\n\nconst spellReducer = (state: SpellType, action: SpellActions): SpellType => {\n  switch (action.type) {\n    case \"change_name\": {\n      return { ...state, name: action.name };\n    }\n    case \"add_base\": {\n      const newState = { ...state };\n      newState.bases.push(0);\n      newState.damages.push(0);\n      return newState;\n    }\n    case \"change_base\": {\n      const bases = [...state.bases];\n      bases[action.index] = parseNum(action.value);\n      return { ...state, bases };\n    }\n    case \"calculate\": {\n      const newState = { ...state };\n      calculateAllSpell(newState, action.character);\n      return newState;\n    }\n    case \"toggle_enchantment\": {\n      const newState = { ...state };\n      if (newState.enchantment === undefined) {\n        newState.enchantment = 0;\n      } else {\n        newState.enchantment = undefined;\n      }\n\n      return newState;\n    }\n    case \"change_enchantment\": {\n      const newState = { ...state };\n      newState.enchantment = parseNum(action.value);\n\n      return newState;\n    }\n    case \"toggle_increment\": {\n      const newState = { ...state };\n      if (newState.increment === undefined) {\n        newState.increment = {\n          base: 0,\n          pips: 1,\n        };\n      } else {\n        newState.increment = undefined;\n      }\n\n      return newState;\n    }\n    case \"change_increment\": {\n      if (state.increment === undefined) return state;\n\n      const increment = { ...state.increment };\n      if (action.base !== undefined) {\n        increment.base = parseNum(action.base);\n      }\n      if (action.pips !== undefined) {\n        increment.pips = parseNum(action.pips);\n      }\n\n      return { ...state, increment };\n    }\n    case \"delete_spell\": {\n      return state;\n    }\n    default: {\n      throw new Error(\"Error\");\n    }\n  }\n};\n\nexport const useSpell = (spell: SpellType, index: number) => {\n  const { dispatch: spellsDispatch } = useContext(SpellsContext);\n  const { character } = useContext(CharacterContext);\n\n  const [newSpell, dispatch] = React.useReducer(spellReducer, spell);\n\n  // Update spell in the manager\n  useEffect(() => {\n    spellsDispatch({ type: \"update_spell\", index: index, spell: newSpell });\n  }, [newSpell, spellsDispatch, index]);\n\n  // Calculate spell\n  useEffect(() => {\n    dispatch({ type: \"calculate\", character });\n  }, [character, newSpell.bases, newSpell.enchantment, newSpell.increment]);\n\n  return dispatch;\n};\n","import { Menu, MenuButton, MenuItem, MenuList } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport { BsThreeDotsVertical } from \"react-icons/bs\";\nimport { SpellActions } from \"../hooks/UseSpell\";\n\ntype OptionMenu = {\n  dispatch: React.Dispatch<SpellActions>;\n};\n\nexport const OptionMenu: React.FC<OptionMenu> = ({ dispatch }) => {\n  return (\n    <Menu>\n      <MenuButton>\n        <BsThreeDotsVertical aria-label=\"spell-options\" size=\"24px\" />\n      </MenuButton>\n      <MenuList>\n        <MenuItem onClick={() => dispatch({ type: \"add_base\" })}>\n          Add Base\n        </MenuItem>\n        <MenuItem onClick={() => dispatch({ type: \"toggle_enchantment\" })}>\n          Toggle Enchantment\n        </MenuItem>\n        <MenuItem onClick={() => dispatch({ type: \"toggle_increment\" })}>\n          Toggle Increment\n        </MenuItem>\n        <MenuItem onClick={() => dispatch({ type: \"delete_spell\" })}>\n          Delete\n        </MenuItem>\n      </MenuList>\n    </Menu>\n  );\n};\n","import { Box, Flex, Input, Text } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport { useSpell } from \"../hooks/UseSpell\";\nimport { SpellType } from \"../types\";\nimport { CardFooter } from \"./Card/CardFooter\";\nimport { CardHeader } from \"./Card/CardHeader\";\nimport { CardItem } from \"./Card/CardItem\";\nimport { CardWrapper } from \"./Card/CardWrapper\";\nimport { LabelNumber } from \"./LabelNumber\";\nimport { OptionMenu } from \"./OptionMenu\";\n\ntype SpellCardProps = {\n  spell: SpellType;\n  index: number;\n};\n\nexport const SpellCard: React.FC<SpellCardProps> = ({ spell, index }) => {\n  const dispatch = useSpell(spell, index);\n\n  return (\n    <CardWrapper>\n      <CardHeader p=\"5px\">\n        <Flex>\n          <Flex>\n            <Input\n              textAlign=\"center\"\n              fontSize=\"20px\"\n              mr=\"5px\"\n              border=\"none\"\n              spellCheck=\"false\"\n              value={spell.name}\n              onFocus={(event: React.ChangeEvent<HTMLInputElement>) => {\n                event.target.select();\n              }}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                event.preventDefault();\n                dispatch({ type: \"change_name\", name: event.target.value });\n              }}\n            />\n          </Flex>\n          <Flex>\n            <OptionMenu dispatch={dispatch} />\n          </Flex>\n        </Flex>\n      </CardHeader>\n      {spell.enchantment !== undefined ? (\n        <CardItem>\n          <LabelNumber\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              dispatch({\n                type: \"change_enchantment\",\n                value: event.target.value,\n              });\n            }}\n            value={spell.enchantment}\n          >\n            Enchantment\n          </LabelNumber>\n        </CardItem>\n      ) : null}\n      {spell.increment !== undefined ? (\n        <CardItem>\n          <Flex>\n            <Box pr=\"10px\">\n              <LabelNumber\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  dispatch({\n                    type: \"change_increment\",\n                    pips: event.target.value,\n                  });\n                }}\n                value={spell.increment.pips}\n              >\n                Pips\n              </LabelNumber>\n            </Box>\n            <LabelNumber\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                dispatch({\n                  type: \"change_increment\",\n                  base: event.target.value,\n                });\n              }}\n              value={spell.increment.base}\n            >\n              Base\n            </LabelNumber>\n          </Flex>\n        </CardItem>\n      ) : null}\n      <CardFooter>\n        {spell.bases.map((value, index) => {\n          return (\n            <Flex key={index}>\n              <Box w=\"45%\">\n                <Input\n                  value={value}\n                  onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                    event.preventDefault();\n                    dispatch({\n                      type: \"change_base\",\n                      index,\n                      value: event.target.value,\n                    });\n                  }}\n                />\n              </Box>\n              <Flex ml=\"auto\" w=\"50%\">\n                <Text\n                  flexWrap=\"wrap\"\n                  wordBreak=\"break-word\"\n                  my=\"auto\"\n                  ml=\"auto\"\n                  fontSize=\"18px\"\n                  fontWeight=\"bold\"\n                >\n                  {spell.damages[index].toLocaleString(\"en\", {\n                    useGrouping: true,\n                  })}\n                </Text>\n              </Flex>\n            </Flex>\n          );\n        })}\n      </CardFooter>\n    </CardWrapper>\n  );\n};\n","import { Box, Flex, Heading, IconButton } from \"@chakra-ui/core\";\nimport React, { useContext } from \"react\";\nimport { CardWrapper } from \"./components/Card/CardWrapper\";\nimport { MainCard } from \"./components/MainCard\";\nimport { SpellCard } from \"./components/SpellCard\";\nimport { MAX_SPELLS } from \"./constants\";\nimport { SpellsContext } from \"./contexts/SpellsContext\";\n\nconst App: React.FC = () => {\n  const { spells, dispatch } = useContext(SpellsContext);\n\n  const spellCards = spells.map((value, index) => {\n    return (\n      <Flex key={value.id} mb=\"auto\" pb=\"20px\" w=\"206px\" mr=\"20px\">\n        <SpellCard spell={value} index={index} />\n      </Flex>\n    );\n  });\n\n  return (\n    <Box maxW=\"900px\" pl=\"20px\" mx=\"auto\">\n      <CardWrapper py=\"10px\" mr=\"20px\" my=\"20px\">\n        <Heading color=\"gray.900\" textAlign=\"center\" size=\"xl\">\n          Wiz Calculator 2\n        </Heading>\n      </CardWrapper>\n      <Box>\n        <Box float=\"left\" minW=\"181px\" w=\"181px\" mr=\"20px\">\n          <Box mb=\"20px\">\n            <MainCard />\n          </Box>\n        </Box>\n        <Flex wrap=\"wrap\">\n          {spellCards}\n          <Flex pb=\"20px\" w=\"216px\" mr=\"10px\">\n            {spells.length < MAX_SPELLS ? (\n              <IconButton\n                variantColor=\"blue\"\n                boxShadow=\"md\"\n                m=\"auto\"\n                aria-label=\"Add Spellcard\"\n                icon=\"add\"\n                onClick={() => {\n                  dispatch({ type: \"add_spell\" });\n                }}\n              />\n            ) : null}\n          </Flex>\n        </Flex>\n      </Box>\n    </Box>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { DefaultTheme, theme } from \"@chakra-ui/core\";\n\nexport const customTheme: DefaultTheme = {\n  ...theme,\n};\n\nexport default customTheme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { CSSReset, ThemeProvider } from \"@chakra-ui/core\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport customTheme from \"./theme\";\nimport { SpellsContextProvider } from \"./contexts/SpellsContext\";\nimport { CharacterContextProvider } from \"./contexts/CharacterContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={customTheme}>\n      <CSSReset />\n      <CharacterContextProvider>\n        <SpellsContextProvider>\n          <App />\n        </SpellsContextProvider>\n      </CharacterContextProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}