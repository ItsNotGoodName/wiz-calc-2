{"version":3,"sources":["components/Card/CardWrapper.tsx","constants.ts","utils/index.tsx","reducers/characterReducers.ts","contexts/CharacterContext.tsx","components/Card/CardFooter.tsx","components/Card/CardHeader.tsx","components/Card/CardItem.tsx","components/LabelNumber.tsx","components/MainCard.tsx","reducers/spellsReducer.ts","contexts/SpellsContext.tsx","hooks/UseSpell.tsx","components/CloseButton.tsx","components/SpellCard.tsx","App.tsx","serviceWorker.ts","theme.ts","index.tsx"],"names":["CardWrapper","children","props","Stack","spacing","boxShadow","border","borderRadius","borderColor","parseNum","num","value","parseFloat","calculateSpell","newState","character","index","enchantment","increment","base","pips","damages","calculateDamage","bases","percentModifier","flatDamage","buffs","dam","Math","floor","Number","i","length","characterReducer","state","action","type","split","map","element","b","parseInt","buffsRaw","Error","initState","pierce","shields","sheldsRaw","CharacterContext","createContext","dispatch","CharacterContextProvider","useReducer","useEffect","character_raw","localStorage","getItem","character_parsed","JSON","parse","setItem","stringify","Provider","CardFooter","px","pb","pt","CardHeader","p","borderBottom","CardItem","mb","LabelNumber","Box","Text","Input","onFocus","event","target","select","MainCard","useContext","textAlign","fontSize","onChange","preventDefault","Textarea","height","resize","placeholder","Button","onClick","mx","w","spellsReducer","id","v4","name","push","spell","spells","SpellsContext","SpellsContextProvider","spells_raw","spells_parsed","spellReducer","calculateAllSpell","undefined","_delete","CloseButton","IconButton","icon","AiOutlineClose","SpellCard","spellsDispatch","React","newSpell","useSpell","useState","editmode","setEditmode","Flex","aria-label","variant","isActive","title","shiftKey","mr","AiOutlineEdit","spellCheck","variantColor","mt","isInline","pr","key","ml","flexWrap","wordBreak","my","fontWeight","toLocaleString","useGrouping","App","spellCards","minW","maxW","pl","py","Heading","color","size","float","wrap","minH","m","Boolean","window","location","hostname","match","customTheme","theme","ReactDOM","render","StrictMode","ThemeProvider","CSSReset","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.13e4e188.chunk.js","sourcesContent":["import { Stack, StackProps } from \"@chakra-ui/core\";\r\nimport React from \"react\";\r\nimport { BORDER, BORDER_COLOR } from \"../../constants\";\r\ntype CardWrapperProps = {} & StackProps;\r\n\r\nexport const CardWrapper: React.FC<CardWrapperProps> = ({\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Stack\r\n      spacing=\"5px\"\r\n      boxShadow=\"md\"\r\n      border={BORDER}\r\n      borderRadius=\"10px\"\r\n      borderColor={BORDER_COLOR}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </Stack>\r\n  );\r\n};\r\n","export const MAX_SPELLS = 12;\r\nexport const BORDER_COLOR = \"gray.300\";\r\nexport const BORDER = \"solid 3px\";\r\n","import { v4 } from \"uuid\";\r\nimport { CharacterType, SpellType } from \"../types\";\r\n\r\nexport const parseBuffs = (text: string) => {\r\n  let buffs = text.split(\"\\n\");\r\n  return buffs.map((element) => {\r\n    const b = parseInt(element.split(\" \")[0]);\r\n    if (!b) {\r\n      return 0;\r\n    }\r\n    return b;\r\n  });\r\n};\r\n\r\nexport const parseNum = (num: string) => {\r\n  const value = parseFloat(num);\r\n  return value ? value : 0;\r\n};\r\n\r\nexport const calculateAllSpell = (\r\n  newState: SpellType,\r\n  character: CharacterType\r\n) => {\r\n  for (let i = 0; i < newState.bases.length; i++) {\r\n    calculateSpell(newState, character, i);\r\n  }\r\n};\r\n\r\nexport const calculateSpell = (\r\n  newState: SpellType,\r\n  character: CharacterType,\r\n  index: number\r\n) => {\r\n  const enchantment = newState.enchantment ? newState.enchantment : 0;\r\n  const increment = newState.increment\r\n    ? newState.increment.base * newState.increment.pips\r\n    : 0;\r\n  newState.damages[index] = calculateDamage(\r\n    character,\r\n    newState.bases[index] + enchantment + increment\r\n  );\r\n  return newState;\r\n};\r\n\r\nexport const calculateDamage = (character: CharacterType, base: number) => {\r\n  const { percentModifier, flatDamage, buffs } = character;\r\n  let dam = Math.floor(\r\n    (1 + Number(percentModifier) / 100) * Number(base) + Number(flatDamage)\r\n  );\r\n  for (let i = 0; i < buffs.length; i++) {\r\n    dam *= 1 + buffs[i] / 100;\r\n    dam = Math.floor(dam);\r\n  }\r\n  return dam;\r\n};\r\n\r\nexport const createSpell = (): SpellType => ({\r\n  id: v4(),\r\n  name: \"Untitled\",\r\n  bases: [0],\r\n  damages: [0],\r\n});\r\n","import { CharacterType } from \"../types\";\r\nimport { parseBuffs, parseNum } from \"../utils\";\r\n\r\nexport type CharacterActions =\r\n  | { type: \"change_percent\"; value: string }\r\n  | { type: \"change_flat\"; value: string }\r\n  | {\r\n      type: \"change_buffs\";\r\n      value: string;\r\n    }\r\n  | {\r\n      type: \"load\";\r\n      character: CharacterType;\r\n    };\r\n\r\nexport const characterReducer = (\r\n  state: CharacterType,\r\n  action: CharacterActions\r\n): CharacterType => {\r\n  switch (action.type) {\r\n    case \"change_percent\": {\r\n      const newState = { ...state };\r\n      newState.percentModifier = parseNum(action.value);\r\n      return newState;\r\n    }\r\n    case \"change_flat\": {\r\n      const newState = { ...state };\r\n      newState.flatDamage = parseNum(action.value);\r\n\r\n      return newState;\r\n    }\r\n    case \"change_buffs\": {\r\n      const newState = { ...state };\r\n      newState.buffs = parseBuffs(action.value);\r\n      newState.buffsRaw = action.value;\r\n\r\n      return newState;\r\n    }\r\n    case \"load\": {\r\n      return action.character;\r\n    }\r\n    default: {\r\n      throw new Error(\"Error\");\r\n    }\r\n  }\r\n};\r\n","import React, { createContext, useEffect, useReducer } from \"react\";\r\nimport {\r\n  CharacterActions,\r\n  characterReducer,\r\n} from \"../reducers/characterReducers\";\r\nimport { CharacterType } from \"../types\";\r\n\r\nconst initState: CharacterType = {\r\n  percentModifier: 0,\r\n  flatDamage: 0,\r\n  pierce: 0,\r\n  buffs: [],\r\n  buffsRaw: \"\",\r\n  shields: [],\r\n  sheldsRaw: \"\",\r\n};\r\n\r\nexport const CharacterContext = createContext<{\r\n  character: CharacterType;\r\n  dispatch: React.Dispatch<CharacterActions>;\r\n}>({ character: initState, dispatch: () => null });\r\n\r\nexport const CharacterContextProvider: React.FC = ({ children }) => {\r\n  const [character, dispatch] = useReducer(characterReducer, initState);\r\n\r\n  // Load character from storage\r\n  useEffect(() => {\r\n    const character_raw = localStorage.getItem(\"character\");\r\n    if (character_raw) {\r\n      const character_parsed: CharacterType = JSON.parse(character_raw);\r\n      dispatch({ type: \"load\", character: character_parsed });\r\n    }\r\n  }, []);\r\n\r\n  // Save character to storage\r\n  useEffect(() => {\r\n    localStorage.setItem(\"character\", JSON.stringify(character));\r\n  }, [character]);\r\n\r\n  return (\r\n    <CharacterContext.Provider value={{ character, dispatch }}>\r\n      {children}\r\n    </CharacterContext.Provider>\r\n  );\r\n};\r\n","import { Stack, StackProps } from \"@chakra-ui/core\";\r\nimport React from \"react\";\r\ntype CardFooter = {} & StackProps;\r\n\r\nexport const CardFooter: React.FC<CardFooter> = ({ children, ...props }) => {\r\n  return (\r\n    <Stack spacing=\"10px\" px=\"10px\" pb=\"10px\" pt=\"5px\" {...props}>\r\n      {children}\r\n    </Stack>\r\n  );\r\n};\r\n","import { Stack, StackProps } from \"@chakra-ui/core\";\r\nimport React from \"react\";\r\nimport { BORDER, BORDER_COLOR } from \"../../constants\";\r\ntype CardHeader = {} & StackProps;\r\n\r\nexport const CardHeader: React.FC<CardHeader> = ({ children, ...props }) => {\r\n  return (\r\n    <Stack\r\n      p=\"10px\"\r\n      borderBottom={BORDER}\r\n      borderColor={BORDER_COLOR}\r\n      spacing=\"10px\"\r\n      {...props}\r\n    >\r\n      {children}\r\n    </Stack>\r\n  );\r\n};\r\n","import { Stack, StackProps } from \"@chakra-ui/core\";\r\nimport React from \"react\";\r\nimport { BORDER, BORDER_COLOR } from \"../../constants\";\r\n\r\nexport const CardItem: React.FC<StackProps> = ({ children, ...props }) => {\r\n  return (\r\n    <Stack\r\n      spacing=\"5px\"\r\n      px=\"10px\"\r\n      pb=\"10px\"\r\n      mb=\"5px\"\r\n      borderBottom={BORDER}\r\n      borderColor={BORDER_COLOR}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </Stack>\r\n  );\r\n};\r\n","import { Box, Input, InputProps, Text } from \"@chakra-ui/core\";\r\nimport React from \"react\";\r\n\r\nexport const LabelNumber: React.FC<InputProps> = ({ children, ...props }) => {\r\n  return (\r\n    <Box>\r\n      <Text>{children}</Text>\r\n      <Input\r\n        type=\"number\"\r\n        onFocus={(event: React.FocusEvent<HTMLInputElement>) => {\r\n          event.target.select();\r\n        }}\r\n        {...props}\r\n      ></Input>\r\n    </Box>\r\n  );\r\n};\r\n","import { Button, Text, Textarea } from \"@chakra-ui/core\";\r\nimport React, { useContext } from \"react\";\r\nimport { CharacterContext } from \"../contexts/CharacterContext\";\r\nimport { CardFooter } from \"./Card/CardFooter\";\r\nimport { CardHeader } from \"./Card/CardHeader\";\r\nimport { CardItem } from \"./Card/CardItem\";\r\nimport { CardWrapper } from \"./Card/CardWrapper\";\r\nimport { LabelNumber } from \"./LabelNumber\";\r\n\r\ntype MainCardProps = {};\r\n\r\nexport const MainCard: React.FC<MainCardProps> = () => {\r\n  const { character, dispatch } = useContext(CharacterContext);\r\n  return (\r\n    <CardWrapper>\r\n      <CardHeader>\r\n        <Text textAlign=\"center\" fontSize=\"20px\">\r\n          Character Stats\r\n        </Text>\r\n      </CardHeader>\r\n      <CardItem>\r\n        <LabelNumber\r\n          value={character.percentModifier}\r\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n            event.preventDefault();\r\n            dispatch({ type: \"change_percent\", value: event.target.value });\r\n          }}\r\n        >\r\n          Percent Modifier\r\n        </LabelNumber>\r\n        <LabelNumber\r\n          value={character.flatDamage}\r\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n            event.preventDefault();\r\n            dispatch({ type: \"change_flat\", value: event.target.value });\r\n          }}\r\n        >\r\n          Flat Damage\r\n        </LabelNumber>\r\n      </CardItem>\r\n      <CardItem>\r\n        <Text fontSize=\"20px\" textAlign=\"center\">\r\n          + / - Charms\r\n        </Text>\r\n      </CardItem>\r\n      <CardFooter>\r\n        <Textarea\r\n          height=\"212px\"\r\n          resize=\"vertical\"\r\n          placeholder=\"[percent] [name]\"\r\n          value={character.buffsRaw}\r\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n            dispatch({ type: \"change_buffs\", value: event.target.value });\r\n          }}\r\n        />\r\n        <Button\r\n          onClick={() => dispatch({ type: \"change_buffs\", value: \"\" })}\r\n          mx=\"auto\"\r\n          w=\"40%\"\r\n        >\r\n          Clear\r\n        </Button>\r\n      </CardFooter>\r\n    </CardWrapper>\r\n  );\r\n};\r\n","import { SpellType } from \"../types\";\r\nimport { createSpell } from \"../utils\";\r\n\r\nexport type SpellsAction =\r\n  | {\r\n      type: \"add_spell\";\r\n    }\r\n  | {\r\n      type: \"delete_spell\";\r\n      index: number;\r\n    }\r\n  | {\r\n      type: \"update_spell\";\r\n      spell: SpellType;\r\n      index: number;\r\n    }\r\n  | {\r\n      type: \"load\";\r\n      spells: SpellType[];\r\n    };\r\n\r\nexport const spellsReducer = (\r\n  state: SpellType[],\r\n  action: SpellsAction\r\n): SpellType[] => {\r\n  switch (action.type) {\r\n    case \"add_spell\": {\r\n      return [...state, createSpell()];\r\n    }\r\n    case \"delete_spell\": {\r\n      const newState = [];\r\n\r\n      for (let i = 0; i < state.length; i++) {\r\n        if (action.index !== i) {\r\n          newState.push(state[i]);\r\n        }\r\n      }\r\n\r\n      return newState;\r\n    }\r\n    case \"update_spell\": {\r\n      const newState = [...state];\r\n      newState[action.index] = action.spell;\r\n\r\n      return newState;\r\n    }\r\n    case \"load\": {\r\n      return action.spells;\r\n    }\r\n    default: {\r\n      throw new Error(\"Error\");\r\n    }\r\n  }\r\n};\r\n","import React, { createContext, useEffect, useReducer } from \"react\";\r\nimport { SpellsAction, spellsReducer } from \"../reducers/spellsReducer\";\r\nimport { SpellType } from \"../types\";\r\n\r\nexport const SpellsContext = createContext<{\r\n  spells: SpellType[];\r\n  dispatch: React.Dispatch<SpellsAction>;\r\n}>({ spells: [], dispatch: () => null });\r\n\r\nexport const SpellsContextProvider: React.FC = ({ children }) => {\r\n  const [spells, dispatch] = useReducer(spellsReducer, []);\r\n\r\n  // Load spells from storage\r\n  useEffect(() => {\r\n    const spells_raw = localStorage.getItem(\"spells\");\r\n    if (spells_raw) {\r\n      const spells_parsed: SpellType[] = JSON.parse(spells_raw);\r\n      dispatch({ type: \"load\", spells: spells_parsed });\r\n    }\r\n  }, []);\r\n\r\n  // Save spells to storage\r\n  useEffect(() => {\r\n    localStorage.setItem(\"spells\", JSON.stringify(spells));\r\n  }, [spells]);\r\n\r\n  return (\r\n    <SpellsContext.Provider value={{ spells, dispatch }}>\r\n      {children}\r\n    </SpellsContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { CharacterContext } from \"../contexts/CharacterContext\";\r\nimport { SpellsContext } from \"../contexts/SpellsContext\";\r\nimport { CharacterType, SpellType } from \"../types\";\r\nimport { calculateAllSpell, parseNum } from \"../utils\";\r\n\r\nexport type SpellActions =\r\n  | {\r\n      type: \"change_name\";\r\n      name: string;\r\n    }\r\n  | {\r\n      type: \"change_base\";\r\n      index: number;\r\n      value: string;\r\n    }\r\n  | {\r\n      type: \"add_base\";\r\n    }\r\n  | {\r\n      type: \"delete_base\";\r\n      index: number;\r\n    }\r\n  | {\r\n      type: \"calculate\";\r\n      character: CharacterType;\r\n    }\r\n  | {\r\n      type: \"toggle_enchantment\";\r\n    }\r\n  | {\r\n      type: \"change_enchantment\";\r\n      value: string;\r\n    }\r\n  | {\r\n      type: \"toggle_increment\";\r\n    }\r\n  | {\r\n      type: \"change_increment\";\r\n      pips?: string;\r\n      base?: string;\r\n    }\r\n  | {\r\n      type: \"delete_spell\";\r\n    };\r\n\r\nconst spellReducer = (state: SpellType, action: SpellActions): SpellType => {\r\n  switch (action.type) {\r\n    case \"change_name\": {\r\n      return { ...state, name: action.name };\r\n    }\r\n    case \"add_base\": {\r\n      const bases = [...state.bases];\r\n      const damages = [...state.damages];\r\n      bases.push(0);\r\n      damages.push(0);\r\n      return { ...state, bases, damages };\r\n    }\r\n    case \"change_base\": {\r\n      const bases = [...state.bases];\r\n      bases[action.index] = parseNum(action.value);\r\n      return { ...state, bases };\r\n    }\r\n    case \"delete_base\": {\r\n      const bases = [];\r\n      const damages = [];\r\n      for (let i = 0; i < state.bases.length; i++) {\r\n        if (action.index !== i) {\r\n          bases.push(state.bases[i]);\r\n          damages.push(state.damages[i]);\r\n        }\r\n      }\r\n      return { ...state, bases, damages };\r\n    }\r\n    case \"calculate\": {\r\n      const newState = { ...state };\r\n      calculateAllSpell(newState, action.character);\r\n      return newState;\r\n    }\r\n    case \"toggle_enchantment\": {\r\n      const newState = { ...state };\r\n      if (newState.enchantment === undefined) {\r\n        newState.enchantment = 0;\r\n      } else {\r\n        newState.enchantment = undefined;\r\n      }\r\n\r\n      return newState;\r\n    }\r\n    case \"change_enchantment\": {\r\n      const newState = { ...state };\r\n      newState.enchantment = parseNum(action.value);\r\n\r\n      return newState;\r\n    }\r\n    case \"toggle_increment\": {\r\n      const newState = { ...state };\r\n      if (newState.increment === undefined) {\r\n        newState.increment = {\r\n          base: 0,\r\n          pips: 1,\r\n        };\r\n      } else {\r\n        newState.increment = undefined;\r\n      }\r\n\r\n      return newState;\r\n    }\r\n    case \"change_increment\": {\r\n      if (state.increment === undefined) return state;\r\n\r\n      const increment = { ...state.increment };\r\n      if (action.base !== undefined) {\r\n        increment.base = parseNum(action.base);\r\n      }\r\n      if (action.pips !== undefined) {\r\n        increment.pips = parseNum(action.pips);\r\n      }\r\n\r\n      return { ...state, increment };\r\n    }\r\n    case \"delete_spell\": {\r\n      return { ...state, _delete: true };\r\n    }\r\n    default: {\r\n      throw new Error(\"Error\");\r\n    }\r\n  }\r\n};\r\n\r\nexport const useSpell = (spell: SpellType, index: number) => {\r\n  const { dispatch: spellsDispatch } = useContext(SpellsContext);\r\n  const { character } = useContext(CharacterContext);\r\n\r\n  const [newSpell, dispatch] = React.useReducer(spellReducer, spell);\r\n\r\n  // Update spell in the manager\r\n  useEffect(() => {\r\n    if (newSpell._delete === true) {\r\n      spellsDispatch({ type: \"delete_spell\", index: index });\r\n    } else {\r\n      spellsDispatch({ type: \"update_spell\", index: index, spell: newSpell });\r\n    }\r\n  }, [newSpell, spellsDispatch, index]);\r\n\r\n  // Calculate spell\r\n  useEffect(() => {\r\n    dispatch({ type: \"calculate\", character });\r\n  }, [character, newSpell.bases, newSpell.enchantment, newSpell.increment]);\r\n\r\n  return dispatch;\r\n};\r\n","import { IconButton, IconButtonProps } from \"@chakra-ui/core\";\r\nimport React from \"react\";\r\nimport { AiOutlineClose } from \"react-icons/ai\";\r\n\r\nexport const CloseButton: React.FC<IconButtonProps> = ({ ...props }) => {\r\n  return <IconButton {...props} fontSize=\"24px\" icon={AiOutlineClose} />;\r\n};\r\n","import { Box, Button, Flex, IconButton, Input, Text } from \"@chakra-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { AiOutlineEdit } from \"react-icons/ai\";\r\nimport { useSpell } from \"../hooks/UseSpell\";\r\nimport { SpellType } from \"../types\";\r\nimport { CardFooter } from \"./Card/CardFooter\";\r\nimport { CardHeader } from \"./Card/CardHeader\";\r\nimport { CardItem } from \"./Card/CardItem\";\r\nimport { CardWrapper } from \"./Card/CardWrapper\";\r\nimport { CloseButton } from \"./CloseButton\";\r\nimport { LabelNumber } from \"./LabelNumber\";\r\n\r\ntype SpellCardProps = {\r\n  spell: SpellType;\r\n  index: number;\r\n};\r\n\r\nexport const SpellCard: React.FC<SpellCardProps> = ({ spell, index }) => {\r\n  const dispatch = useSpell(spell, index);\r\n  const [editmode, setEditmode] = useState(false);\r\n\r\n  return (\r\n    <CardWrapper>\r\n      <CardHeader p=\"5px\">\r\n        <Flex>\r\n          <Flex>\r\n            <IconButton\r\n              aria-label=\"edit\"\r\n              variant=\"ghost\"\r\n              isActive={editmode}\r\n              fontSize=\"24px\"\r\n              title=\"Click for edit mode or Shift+Click to delete spell\"\r\n              onClick={(event: React.MouseEvent<any, MouseEvent>) => {\r\n                if (event.shiftKey) {\r\n                  dispatch({ type: \"delete_spell\" });\r\n                } else {\r\n                  setEditmode(!editmode);\r\n                }\r\n              }}\r\n              mr=\"5px\"\r\n              icon={AiOutlineEdit}\r\n            />\r\n          </Flex>\r\n          <Flex>\r\n            <Input\r\n              textAlign=\"center\"\r\n              fontSize=\"20px\"\r\n              mr=\"5px\"\r\n              border=\"none\"\r\n              spellCheck=\"false\"\r\n              value={spell.name}\r\n              onFocus={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                event.target.select();\r\n              }}\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                event.preventDefault();\r\n                dispatch({ type: \"change_name\", name: event.target.value });\r\n              }}\r\n            />\r\n          </Flex>\r\n          <Flex>\r\n            {editmode && (\r\n              <CloseButton\r\n                variantColor=\"red\"\r\n                aria-label=\"close\"\r\n                title=\"Delete spell\"\r\n                onClick={() => dispatch({ type: \"delete_spell\" })}\r\n              />\r\n            )}\r\n          </Flex>\r\n        </Flex>\r\n      </CardHeader>\r\n      {editmode && (\r\n        <CardItem mt=\"5px\" spacing=\"8px\" isInline={true}>\r\n          <Button\r\n            onClick={() => dispatch({ type: \"add_base\" })}\r\n            isActive={spell.enchantment !== undefined}\r\n            title=\"Add base to spell\"\r\n          >\r\n            B\r\n          </Button>\r\n          <Button\r\n            onClick={() => dispatch({ type: \"toggle_enchantment\" })}\r\n            isActive={spell.enchantment !== undefined}\r\n            title=\"Toggle enchantment\"\r\n          >\r\n            E\r\n          </Button>\r\n          <Button\r\n            onClick={() => dispatch({ type: \"toggle_increment\" })}\r\n            isActive={spell.increment !== undefined}\r\n            title=\"Toggle increment\"\r\n          >\r\n            I\r\n          </Button>\r\n        </CardItem>\r\n      )}\r\n      {spell.enchantment !== undefined ? (\r\n        <CardItem>\r\n          <LabelNumber\r\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n              dispatch({\r\n                type: \"change_enchantment\",\r\n                value: event.target.value,\r\n              });\r\n            }}\r\n            value={spell.enchantment}\r\n          >\r\n            Enchantment\r\n          </LabelNumber>\r\n        </CardItem>\r\n      ) : null}\r\n      {spell.increment !== undefined ? (\r\n        <CardItem>\r\n          <Flex>\r\n            <Box pr=\"10px\">\r\n              <LabelNumber\r\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                  dispatch({\r\n                    type: \"change_increment\",\r\n                    pips: event.target.value,\r\n                  });\r\n                }}\r\n                value={spell.increment.pips}\r\n              >\r\n                Pips\r\n              </LabelNumber>\r\n            </Box>\r\n            <LabelNumber\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                dispatch({\r\n                  type: \"change_increment\",\r\n                  base: event.target.value,\r\n                });\r\n              }}\r\n              value={spell.increment.base}\r\n            >\r\n              Base\r\n            </LabelNumber>\r\n          </Flex>\r\n        </CardItem>\r\n      ) : null}\r\n      <CardFooter>\r\n        {spell.bases.map((value, index) => {\r\n          return (\r\n            <Flex key={index}>\r\n              {editmode && (\r\n                <CloseButton\r\n                  variant=\"ghost\"\r\n                  mr=\"10px\"\r\n                  aria-label=\"close\"\r\n                  title=\"Delete base\"\r\n                  onClick={() => dispatch({ type: \"delete_base\", index })}\r\n                />\r\n              )}\r\n              <Flex w=\"50%\">\r\n                <LabelNumber\r\n                  value={value}\r\n                  title=\"Base damage\"\r\n                  onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                    event.preventDefault();\r\n                    dispatch({\r\n                      type: \"change_base\",\r\n                      index,\r\n                      value: event.target.value,\r\n                    });\r\n                  }}\r\n                ></LabelNumber>\r\n              </Flex>\r\n              <Flex ml=\"auto\">\r\n                <Text\r\n                  flexWrap=\"wrap\"\r\n                  wordBreak=\"break-word\"\r\n                  my=\"auto\"\r\n                  ml=\"auto\"\r\n                  fontSize=\"18px\"\r\n                  fontWeight=\"bold\"\r\n                >\r\n                  {spell.damages[index].toLocaleString(\"en\", {\r\n                    useGrouping: true,\r\n                  })}\r\n                </Text>\r\n              </Flex>\r\n            </Flex>\r\n          );\r\n        })}\r\n      </CardFooter>\r\n    </CardWrapper>\r\n  );\r\n};\r\n","import { Box, Flex, Heading, IconButton } from \"@chakra-ui/core\";\r\nimport React, { useContext } from \"react\";\r\nimport { CardWrapper } from \"./components/Card/CardWrapper\";\r\nimport { MainCard } from \"./components/MainCard\";\r\nimport { SpellCard } from \"./components/SpellCard\";\r\nimport { MAX_SPELLS } from \"./constants\";\r\nimport { SpellsContext } from \"./contexts/SpellsContext\";\r\n\r\nconst App: React.FC = () => {\r\n  const { spells, dispatch } = useContext(SpellsContext);\r\n\r\n  const spellCards = spells.map((value, index) => {\r\n    return (\r\n      <Flex key={value.id} mb=\"auto\" pb=\"20px\" w=\"206px\" mr=\"20px\">\r\n        <SpellCard spell={value} index={index} />\r\n      </Flex>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Box minW=\"430px\" maxW=\"900px\" pl=\"20px\" mx=\"auto\">\r\n      <CardWrapper py=\"10px\" mr=\"20px\" my=\"20px\">\r\n        <Heading color=\"gray.900\" textAlign=\"center\" size=\"xl\">\r\n          Wiz Calculator 2\r\n        </Heading>\r\n      </CardWrapper>\r\n      <Box>\r\n        <Box float=\"left\" minW=\"181px\" w=\"181px\" mr=\"20px\">\r\n          <Box mb=\"20px\">\r\n            <MainCard />\r\n          </Box>\r\n        </Box>\r\n        <Flex wrap=\"wrap\">\r\n          {spellCards}\r\n          <Flex minH=\"100px\" pb=\"20px\" w=\"216px\" mr=\"10px\">\r\n            {spells.length < MAX_SPELLS ? (\r\n              <IconButton\r\n                variantColor=\"blue\"\r\n                boxShadow=\"md\"\r\n                m=\"auto\"\r\n                aria-label=\"Add Spellcard\"\r\n                icon=\"add\"\r\n                onClick={() => {\r\n                  dispatch({ type: \"add_spell\" });\r\n                }}\r\n              />\r\n            ) : null}\r\n          </Flex>\r\n        </Flex>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { DefaultTheme, theme } from \"@chakra-ui/core\";\r\n\r\nexport const customTheme: DefaultTheme = {\r\n  ...theme,\r\n};\r\n\r\nexport default customTheme;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { CSSReset, ThemeProvider } from \"@chakra-ui/core\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport customTheme from \"./theme\";\r\nimport { SpellsContextProvider } from \"./contexts/SpellsContext\";\r\nimport { CharacterContextProvider } from \"./contexts/CharacterContext\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={customTheme}>\r\n      <CSSReset />\r\n      <CharacterContextProvider>\r\n        <SpellsContextProvider>\r\n          <App />\r\n        </SpellsContextProvider>\r\n      </CharacterContextProvider>\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}