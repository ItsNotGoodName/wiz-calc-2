{"version":3,"sources":["constants.ts","components/CardWrapper.tsx","components/LabelNumber.tsx","components/MainCard.tsx","components/CardOptionMenu.tsx","utils/parseNum.ts","components/UseSpell.tsx","utils/calculateDamage.ts","components/SpellCard.tsx","components/ToolBarCard.tsx","components/UseCharacter.tsx","utils/parseBuffs.ts","App.tsx","serviceWorker.ts","theme.ts","index.tsx"],"names":["BORDER","CardWrapper","children","props","Stack","spacing","boxShadow","border","borderRadius","w","borderColor","LabelNumber","label","Box","Text","Input","MainCard","character","dispatch","p","borderBottom","textAlign","fontSize","px","pb","value","percentModifier","onChange","event","preventDefault","type","target","flatDamage","borderTop","py","Textarea","height","resize","placeholder","buffsRaw","Button","onClick","mx","CardOptionMenu","id","deleteSpell","Menu","aria-label","size","parseNum","num","parseInt","dpsCalcAll","newState","i","bases","length","dpsCalc","index","enchantment","increment","base","pips","damages","buffs","dam","Math","floor","Number","calculateDamage","spellReducer","state","action","name","push","undefined","console","log","Error","SpellCard","initState","hook","React","useReducer","useEffect","useSpell","spell","Flex","mr","spellCheck","onFocus","select","pr","pt","map","key","ml","flexWrap","wordBreak","my","fontWeight","toLocaleString","useGrouping","ToolbarCard","characterReducer","split","element","b","App","reducer","pierce","shields","sheldsRaw","useCharacter","setCharacter","useState","v4","spells","setSpells","indexOf","newSpells","spellCards","mb","maxW","pl","Heading","color","float","minW","wrap","IconButton","variantColor","mt","icon","Boolean","window","location","hostname","match","customTheme","theme","ReactDOM","render","StrictMode","ThemeProvider","CSSReset","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4ac60f15.chunk.js","sourcesContent":["export const MAX_SPELLS = 12;\r\nexport const BORDER_COLOR = \"gray.300\";\r\nexport const BORDER = \"solid 3px\";\r\n","import { Stack, StackProps } from \"@chakra-ui/core\";\r\nimport React from \"react\";\r\nimport { BORDER, BORDER_COLOR } from \"../constants\";\r\ntype CardWrapperProps = {} & StackProps;\r\n\r\nexport const CardWrapper: React.FC<CardWrapperProps> = ({\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Stack\r\n      spacing=\"5px\"\r\n      boxShadow=\"md\"\r\n      border={BORDER}\r\n      borderRadius=\"10px\"\r\n      w=\"100%\"\r\n      borderColor={BORDER_COLOR}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </Stack>\r\n  );\r\n};\r\n","import { Box, Input, InputProps, Text } from \"@chakra-ui/core\";\r\nimport React from \"react\";\r\n\r\nexport const LabelNumber: React.FC<{ label: string } & InputProps> = ({\r\n  label,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Box>\r\n      <Text>{label}</Text>\r\n      <Input {...props} />\r\n    </Box>\r\n  );\r\n};\r\n","import { Box, Button, Stack, Textarea } from \"@chakra-ui/core\";\r\nimport React from \"react\";\r\nimport { BORDER, BORDER_COLOR } from \"../constants\";\r\nimport { CharacterType } from \"../types\";\r\nimport { CardWrapper } from \"./CardWrapper\";\r\nimport { LabelNumber } from \"./LabelNumber\";\r\nimport { CharacterActions } from \"./UseCharacter\";\r\n\r\ntype MainCardProps = {\r\n  character: CharacterType;\r\n  dispatch: React.Dispatch<CharacterActions>;\r\n};\r\n\r\nexport const MainCard: React.FC<MainCardProps> = ({ character, dispatch }) => {\r\n  return (\r\n    <CardWrapper>\r\n      <Box\r\n        p=\"10px\"\r\n        borderBottom={BORDER}\r\n        borderColor={BORDER_COLOR}\r\n        textAlign=\"center\"\r\n        fontSize=\"20px\"\r\n      >\r\n        Character Stats\r\n      </Box>\r\n      <Stack px=\"10px\" spacing=\"5px\" pb=\"5px\">\r\n        <LabelNumber\r\n          label=\"Percent Modifier\"\r\n          value={character.percentModifier}\r\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n            event.preventDefault();\r\n            dispatch({ type: \"change_percent\", value: event.target.value });\r\n          }}\r\n        />\r\n        <LabelNumber\r\n          label=\"Flat Damage\"\r\n          value={character.flatDamage}\r\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n            event.preventDefault();\r\n            dispatch({ type: \"change_flat\", value: event.target.value });\r\n          }}\r\n        />\r\n      </Stack>\r\n      <Box\r\n        p=\"10px\"\r\n        borderBottom={BORDER}\r\n        borderTop={BORDER}\r\n        borderColor={BORDER_COLOR}\r\n        fontSize=\"20px\"\r\n        textAlign=\"center\"\r\n      >\r\n        + / - Charms\r\n      </Box>\r\n      <Stack spacing=\"5px\" py=\"5px\" px=\"10px\">\r\n        <Textarea\r\n          height=\"212px\"\r\n          resize=\"vertical\"\r\n          placeholder=\"[percent] [name]\"\r\n          value={character.buffsRaw}\r\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n            dispatch({ type: \"change_buffs\", value: event.target.value });\r\n          }}\r\n        />\r\n        <Button\r\n          onClick={() => dispatch({ type: \"change_buffs\", value: \"\" })}\r\n          mx=\"auto\"\r\n          w=\"40%\"\r\n        >\r\n          Clear\r\n        </Button>\r\n      </Stack>\r\n    </CardWrapper>\r\n  );\r\n};\r\n","import { Menu, MenuButton, MenuItem, MenuList } from \"@chakra-ui/core\";\r\nimport React from \"react\";\r\nimport { BsThreeDotsVertical } from \"react-icons/bs\";\r\nimport { SpellActions } from \"./UseSpell\";\r\n\r\ntype CardOptionMenu = {\r\n  dispatch: React.Dispatch<SpellActions>;\r\n  id: string;\r\n  deleteSpell: (id: string) => void;\r\n};\r\n\r\nexport const CardOptionMenu: React.FC<CardOptionMenu> = ({\r\n  dispatch,\r\n  id,\r\n  deleteSpell,\r\n}) => {\r\n  return (\r\n    <Menu>\r\n      <MenuButton>\r\n        <BsThreeDotsVertical aria-label=\"spell-options\" size=\"24px\" />\r\n      </MenuButton>\r\n      <MenuList>\r\n        <MenuItem onClick={() => dispatch({ type: \"add_base\" })}>\r\n          Add Base\r\n        </MenuItem>\r\n        <MenuItem onClick={() => dispatch({ type: \"toggle_enchantment\" })}>\r\n          Toggle Enchantment\r\n        </MenuItem>\r\n        <MenuItem onClick={() => dispatch({ type: \"toggle_increment\" })}>\r\n          Toggle Increment\r\n        </MenuItem>\r\n        <MenuItem onClick={() => deleteSpell(id)}>Delete</MenuItem>\r\n      </MenuList>\r\n    </Menu>\r\n  );\r\n};\r\n","export const parseNum = (num: string) => {\r\n  const value = parseInt(num);\r\n  return value ? value : 0;\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { CharacterType, SpellType } from \"../types\";\r\nimport { calculateDamage } from \"../utils/calculateDamage\";\r\nimport { parseNum } from \"../utils/parseNum\";\r\n\r\nexport type SpellActions =\r\n  | {\r\n      type: \"change_name\";\r\n      name: string;\r\n    }\r\n  | {\r\n      type: \"change_base\";\r\n      index: number;\r\n      value: string;\r\n    }\r\n  | {\r\n      type: \"add_base\";\r\n    }\r\n  | {\r\n      type: \"update_character\";\r\n      value: CharacterType;\r\n    }\r\n  | {\r\n      type: \"toggle_enchantment\";\r\n    }\r\n  | {\r\n      type: \"change_enchantment\";\r\n      value: string;\r\n    }\r\n  | {\r\n      type: \"toggle_increment\";\r\n    }\r\n  | {\r\n      type: \"change_increment\";\r\n      pips?: string;\r\n      base?: string;\r\n    };\r\n\r\nconst dpsCalcAll = (newState: SpellType) => {\r\n  for (let i = 0; i < newState.bases.length; i++) {\r\n    dpsCalc(newState, i);\r\n  }\r\n};\r\n\r\nconst dpsCalc = (newState: SpellType, index: number) => {\r\n  const enchantment = newState.enchantment ? newState.enchantment : 0;\r\n  const increment = newState.increment\r\n    ? newState.increment.base * newState.increment.pips\r\n    : 0;\r\n  newState.damages[index] = calculateDamage(\r\n    newState.character,\r\n    newState.bases[index] + enchantment + increment\r\n  );\r\n  return newState;\r\n};\r\n\r\nconst spellReducer = (state: SpellType, action: SpellActions): SpellType => {\r\n  switch (action.type) {\r\n    case \"change_name\": {\r\n      return { ...state, name: action.name };\r\n    }\r\n    case \"add_base\": {\r\n      const newState = { ...state };\r\n      newState.bases.push(0);\r\n      newState.damages.push(0);\r\n      return newState;\r\n    }\r\n    case \"change_base\": {\r\n      const newState = { ...state };\r\n      newState.bases[action.index] = parseNum(action.value);\r\n\r\n      dpsCalc(newState, action.index);\r\n      return newState;\r\n    }\r\n    case \"update_character\": {\r\n      const newState = { ...state };\r\n      newState.character = action.value;\r\n\r\n      dpsCalcAll(newState);\r\n      return newState;\r\n    }\r\n    case \"toggle_enchantment\": {\r\n      const newState = { ...state };\r\n      if (newState.enchantment === undefined) {\r\n        newState.enchantment = 0;\r\n      } else {\r\n        newState.enchantment = undefined;\r\n      }\r\n\r\n      dpsCalcAll(newState);\r\n      return newState;\r\n    }\r\n    case \"change_enchantment\": {\r\n      const newState = { ...state };\r\n      newState.enchantment = parseNum(action.value);\r\n\r\n      dpsCalcAll(newState);\r\n      return newState;\r\n    }\r\n    case \"toggle_increment\": {\r\n      const newState = { ...state };\r\n      if (newState.increment === undefined) {\r\n        newState.increment = {\r\n          base: 0,\r\n          pips: 1,\r\n        };\r\n      } else {\r\n        newState.increment = undefined;\r\n      }\r\n\r\n      dpsCalcAll(newState);\r\n      return newState;\r\n    }\r\n    case \"change_increment\": {\r\n      const newState = { ...state };\r\n      console.log(action);\r\n      if (action.base !== undefined) {\r\n        newState.increment!.base = parseNum(action.base);\r\n      }\r\n      if (action.pips !== undefined) {\r\n        newState.increment!.pips = parseNum(action.pips);\r\n      }\r\n\r\n      dpsCalcAll(newState);\r\n      return newState;\r\n    }\r\n    default: {\r\n      throw new Error(\"Error\");\r\n    }\r\n  }\r\n};\r\n\r\nexport const useSpell = ({\r\n  character,\r\n  id,\r\n}: {\r\n  character: CharacterType;\r\n  id: string;\r\n}) => {\r\n  const initState: SpellType = {\r\n    id,\r\n    name: \"Untitled\",\r\n    bases: [0],\r\n    damages: [0],\r\n    character,\r\n  };\r\n  const hook = React.useReducer(spellReducer, initState);\r\n\r\n  // Update character when it changes\r\n  const [, dispatch] = hook;\r\n  useEffect(() => {\r\n    dispatch({ type: \"update_character\", value: character });\r\n  }, [character, dispatch]);\r\n\r\n  return hook;\r\n};\r\n","import { CharacterType } from \"../types\";\r\n\r\nexport const calculateDamage = (character: CharacterType, base: number) => {\r\n  const { percentModifier, flatDamage, buffs } = character;\r\n  let dam = Math.floor(\r\n    (1 + Number(percentModifier) / 100) * Number(base) + Number(flatDamage)\r\n  );\r\n  for (let i = 0; i < buffs.length; i++) {\r\n    dam *= 1 + buffs[i] / 100;\r\n    dam = Math.floor(dam);\r\n  }\r\n  return dam;\r\n};\r\n","import { Box, Flex, Input, Stack, Text } from \"@chakra-ui/core\";\r\nimport React from \"react\";\r\nimport { BORDER, BORDER_COLOR } from \"../constants\";\r\nimport { CharacterType } from \"../types\";\r\nimport { CardOptionMenu } from \"./CardOptionMenu\";\r\nimport { CardWrapper } from \"./CardWrapper\";\r\nimport { LabelNumber } from \"./LabelNumber\";\r\nimport { useSpell } from \"./UseSpell\";\r\n\r\ntype SpellCardProps = {\r\n  character: CharacterType;\r\n  id: string;\r\n  deleteSpell: (id: string) => void;\r\n};\r\n\r\nexport const SpellCard: React.FC<SpellCardProps> = ({\r\n  character,\r\n  id,\r\n  deleteSpell,\r\n}) => {\r\n  const [spell, dispatch] = useSpell({ character, id });\r\n\r\n  return (\r\n    <CardWrapper>\r\n      <Box p=\"5px\" borderBottom={BORDER} borderColor={BORDER_COLOR}>\r\n        <Flex>\r\n          <Flex>\r\n            <Input\r\n              textAlign=\"center\"\r\n              fontSize=\"20px\"\r\n              mr=\"5px\"\r\n              border=\"none\"\r\n              spellCheck=\"false\"\r\n              value={spell.name}\r\n              onFocus={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                event.target.select();\r\n              }}\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                event.preventDefault();\r\n                dispatch({ type: \"change_name\", name: event.target.value });\r\n              }}\r\n            />\r\n          </Flex>\r\n          <Flex>\r\n            <CardOptionMenu\r\n              dispatch={dispatch}\r\n              deleteSpell={deleteSpell}\r\n              id={id}\r\n            />\r\n          </Flex>\r\n        </Flex>\r\n      </Box>\r\n      {spell.enchantment !== undefined ? (\r\n        <Box\r\n          px=\"10px\"\r\n          pb=\"10px\"\r\n          borderBottom={BORDER}\r\n          borderColor={BORDER_COLOR}\r\n        >\r\n          <LabelNumber\r\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n              dispatch({\r\n                type: \"change_enchantment\",\r\n                value: event.target.value,\r\n              });\r\n            }}\r\n            value={spell.enchantment}\r\n            label=\"Enchantment\"\r\n          />\r\n        </Box>\r\n      ) : null}\r\n      {spell.increment !== undefined ? (\r\n        <Stack\r\n          px=\"10px\"\r\n          pb=\"10px\"\r\n          borderBottom={BORDER}\r\n          borderColor={BORDER_COLOR}\r\n        >\r\n          <Flex>\r\n            <Box pr=\"10px\">\r\n              <LabelNumber\r\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                  dispatch({\r\n                    type: \"change_increment\",\r\n                    pips: event.target.value,\r\n                  });\r\n                }}\r\n                value={spell.increment.pips}\r\n                label=\"Pips\"\r\n              />\r\n            </Box>\r\n            <LabelNumber\r\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                dispatch({\r\n                  type: \"change_increment\",\r\n                  base: event.target.value,\r\n                });\r\n              }}\r\n              value={spell.increment.base}\r\n              label=\"Increment\"\r\n            />\r\n          </Flex>\r\n        </Stack>\r\n      ) : null}\r\n      <Box px=\"10px\" pt=\"5px\" pb=\"10px\">\r\n        {spell.bases.map((value, index) => {\r\n          return (\r\n            <Flex key={index}>\r\n              <Box w=\"45%\">\r\n                <Input\r\n                  value={value}\r\n                  onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n                    event.preventDefault();\r\n                    dispatch({\r\n                      type: \"change_base\",\r\n                      index,\r\n                      value: event.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Box>\r\n              <Flex ml=\"auto\" w=\"50%\">\r\n                <Text\r\n                  flexWrap=\"wrap\"\r\n                  wordBreak=\"break-word\"\r\n                  my=\"auto\"\r\n                  ml=\"auto\"\r\n                  fontSize=\"18px\"\r\n                  fontWeight=\"bold\"\r\n                >\r\n                  {spell.damages[index].toLocaleString(\"en\", {\r\n                    useGrouping: true,\r\n                  })}\r\n                </Text>\r\n              </Flex>\r\n            </Flex>\r\n          );\r\n        })}\r\n      </Box>\r\n    </CardWrapper>\r\n  );\r\n};\r\n","import { Button } from \"@chakra-ui/core\";\r\nimport React from \"react\";\r\nimport { CardWrapper } from \"./CardWrapper\";\r\ntype ToolbarCardProps = {};\r\n\r\nexport const ToolbarCard: React.FC<ToolbarCardProps> = () => {\r\n  return (\r\n    <CardWrapper>\r\n      <Button>Save</Button>\r\n    </CardWrapper>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { CharacterType } from \"../types\";\r\nimport { parseBuffs } from \"../utils/parseBuffs\";\r\nimport { parseNum } from \"../utils/parseNum\";\r\n\r\nexport type CharacterActions =\r\n  | { type: \"change_percent\"; value: string }\r\n  | { type: \"change_flat\"; value: string }\r\n  | {\r\n      type: \"change_buffs\";\r\n      value: string;\r\n    };\r\n\r\nconst characterReducer = (\r\n  state: CharacterType,\r\n  action: CharacterActions\r\n): CharacterType => {\r\n  switch (action.type) {\r\n    case \"change_percent\": {\r\n      const newState = { ...state };\r\n      newState.percentModifier = parseNum(action.value);\r\n      return newState;\r\n    }\r\n    case \"change_flat\": {\r\n      const newState = { ...state };\r\n      newState.flatDamage = parseNum(action.value);\r\n\r\n      return newState;\r\n    }\r\n    case \"change_buffs\": {\r\n      const newState = { ...state };\r\n      newState.buffs = parseBuffs(action.value);\r\n      newState.buffsRaw = action.value;\r\n\r\n      return newState;\r\n    }\r\n    default: {\r\n      throw new Error(\"Error\");\r\n    }\r\n  }\r\n};\r\n\r\nexport const useCharacter = ({ reducer = characterReducer } = {}) => {\r\n  const initState: CharacterType = {\r\n    percentModifier: 0,\r\n    flatDamage: 0,\r\n    pierce: 0,\r\n    buffs: [],\r\n    buffsRaw: \"\",\r\n    shields: [],\r\n    sheldsRaw: \"\",\r\n  };\r\n  return React.useReducer(reducer, initState);\r\n};\r\n","export const parseBuffs = (text: string) => {\r\n  let buffs = text.split(\"\\n\");\r\n  return buffs.map((element) => {\r\n    const b = parseInt(element.split(\" \")[0]);\r\n    if (!b) {\r\n      return 0;\r\n    }\r\n    return b;\r\n  });\r\n};\r\n","import { Box, Flex, Heading, IconButton } from \"@chakra-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { v4 } from \"uuid\";\r\nimport { MainCard } from \"./components/MainCard\";\r\nimport { SpellCard } from \"./components/SpellCard\";\r\nimport { ToolbarCard } from \"./components/ToolBarCard\";\r\nimport { useCharacter } from \"./components/UseCharacter\";\r\nimport { BORDER, BORDER_COLOR, MAX_SPELLS } from \"./constants\";\r\n\r\nconst App: React.FC = () => {\r\n  const [character, setCharacter] = useCharacter();\r\n\r\n  const [spells, setSpells] = useState<string[]>([v4()]);\r\n\r\n  const deleteSpell = (id: string) => {\r\n    const index = spells.indexOf(id);\r\n    if (index !== -1) {\r\n      const newSpells = [];\r\n      for (let i = 0; i < spells.length; i++) {\r\n        if (index !== i) {\r\n          newSpells.push(spells[i]);\r\n        }\r\n      }\r\n\r\n      setSpells(newSpells);\r\n    }\r\n  };\r\n\r\n  const spellCards = spells.map((value) => {\r\n    return (\r\n      <Flex key={value} mb=\"auto\" pb=\"20px\" w=\"206px\" mr=\"20px\">\r\n        <SpellCard id={value} deleteSpell={deleteSpell} character={character} />\r\n      </Flex>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Box maxW=\"900px\" pl=\"20px\" mx=\"auto\">\r\n      <Box\r\n        my=\"20px\"\r\n        mr=\"20px\"\r\n        py=\"10px\"\r\n        boxShadow=\"md\"\r\n        border={BORDER}\r\n        borderRadius=\"10px\"\r\n        borderColor={BORDER_COLOR}\r\n      >\r\n        <Heading color=\"gray.900\" textAlign=\"center\" size=\"xl\">\r\n          Wiz Calculator 2\r\n        </Heading>\r\n      </Box>\r\n      <Box>\r\n        <Box float=\"left\" minW=\"181px\" w=\"181px\" mr=\"20px\">\r\n          <Box mb=\"20px\">\r\n            <MainCard character={character} dispatch={setCharacter} />\r\n          </Box>\r\n          <ToolbarCard />\r\n        </Box>\r\n        <Flex wrap=\"wrap\">\r\n          {spellCards}\r\n          <Flex w=\"216px\" mr=\"10px\">\r\n            {spells.length < MAX_SPELLS ? (\r\n              <IconButton\r\n                variantColor=\"blue\"\r\n                boxShadow=\"md\"\r\n                mx=\"auto\"\r\n                mt=\"25px\"\r\n                aria-label=\"Add Spellcard\"\r\n                icon=\"add\"\r\n                onClick={() => {\r\n                  const newSpells = [...spells];\r\n                  newSpells.push(v4());\r\n                  setSpells(newSpells);\r\n                }}\r\n              />\r\n            ) : null}\r\n          </Flex>\r\n        </Flex>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { DefaultTheme, theme } from \"@chakra-ui/core\";\r\n\r\nexport const customTheme: DefaultTheme = {\r\n  ...theme,\r\n};\r\n\r\nexport default customTheme;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { CSSReset, ThemeProvider } from \"@chakra-ui/core\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport customTheme from \"./theme\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={customTheme}>\r\n      <CSSReset />\r\n      <App />\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}