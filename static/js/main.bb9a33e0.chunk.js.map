{"version":3,"sources":["components/Card/CardWrapper.tsx","constants.ts","utils/index.tsx","reducers/characterReducers.ts","contexts/CharacterContext.tsx","components/Card/CardFooter.tsx","components/Card/CardHeader.tsx","components/Card/CardItem.tsx","components/LabelNumber.tsx","components/MainCard.tsx","reducers/spellsReducer.ts","contexts/SpellsContext.tsx","reducers/spellReducer.tsx","components/CloseButton.tsx","components/SpellCard.tsx","hooks/UseSpell.tsx","App.tsx","serviceWorker.ts","theme.ts","index.tsx"],"names":["CardWrapper","children","props","Stack","spacing","boxShadow","border","borderRadius","borderColor","parseNum","num","value","parseFloat","calculateSpell","newState","character","index","enchantment","enabled","base","increment","pips","damages","calculateDamage","bases","percentModifier","flatDamage","buffs","dam","Math","floor","Number","i","length","characterReducer","state","action","type","split","map","element","b","parseInt","buffsRaw","Error","initState","pierce","shields","sheldsRaw","CharacterContext","createContext","loading","dispatch","CharacterContextProvider","useReducer","useState","setLoading","useEffect","character_raw","localStorage","getItem","character_parsed","JSON","parse","setItem","stringify","Provider","CardFooter","px","pb","pt","CardHeader","p","borderBottom","CardItem","mb","LabelNumber","Box","Text","Input","onFocus","event","target","select","MainCard","useContext","textAlign","fontSize","isDisabled","onChange","preventDefault","Textarea","height","resize","placeholder","Button","onClick","mx","w","spellsReducer","id","v4","name","push","spell","spells","SpellsContext","SpellsContextProvider","spells_raw","spells_parsed","spellReducer","calculateAllSpell","undefined","_delete","CloseButton","IconButton","icon","AiOutlineClose","SpellCard","spellsDispatch","React","newSpell","useSpell","editmode","setEditmode","Flex","aria-label","variant","isActive","title","shiftKey","mr","AiOutlineEdit","spellCheck","variantColor","mt","isInline","Checkbox","isChecked","size","pr","key","ml","flexWrap","wordBreak","my","fontWeight","toLocaleString","useGrouping","App","spellCards","spellSection","minH","m","minW","maxW","pl","py","Heading","color","float","wrap","Spinner","Boolean","window","location","hostname","match","customTheme","theme","ReactDOM","render","StrictMode","ThemeProvider","CSSReset","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bb9a33e0.chunk.js","sourcesContent":["import { Stack, StackProps } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport { BORDER, BORDER_COLOR } from \"../../constants\";\ntype CardWrapperProps = {} & StackProps;\n\nexport const CardWrapper: React.FC<CardWrapperProps> = ({\n  children,\n  ...props\n}) => {\n  return (\n    <Stack\n      spacing=\"5px\"\n      boxShadow=\"md\"\n      border={BORDER}\n      borderRadius=\"10px\"\n      borderColor={BORDER_COLOR}\n      {...props}\n    >\n      {children}\n    </Stack>\n  );\n};\n","export const MAX_SPELLS = 12;\nexport const BORDER_COLOR = \"gray.300\";\nexport const BORDER = \"solid 3px\";\n","import { v4 } from \"uuid\";\nimport { CharacterType, SpellType } from \"../types\";\n\nexport const parseBuffs = (text: string) => {\n  let buffs = text.split(\"\\n\");\n  return buffs.map((element) => {\n    const b = parseInt(element.split(\" \")[0]);\n    if (!b) {\n      return 0;\n    }\n    return b;\n  });\n};\n\nexport const parseNum = (num: string) => {\n  const value = parseFloat(num);\n  return value ? value : 0;\n};\n\nexport const calculateAllSpell = (\n  newState: SpellType,\n  character: CharacterType\n) => {\n  for (let i = 0; i < newState.bases.length; i++) {\n    calculateSpell(newState, character, i);\n  }\n};\n\nexport const calculateSpell = (\n  newState: SpellType,\n  character: CharacterType,\n  index: number\n) => {\n  const enchantment =\n    newState.enchantment && newState.enchantment.enabled\n      ? newState.enchantment.base\n      : 0;\n  const increment = newState.increment\n    ? newState.increment.base * newState.increment.pips\n    : 0;\n  newState.damages[index] = calculateDamage(\n    character,\n    newState.bases[index] + enchantment + increment\n  );\n  return newState;\n};\n\nexport const calculateDamage = (character: CharacterType, base: number) => {\n  const { percentModifier, flatDamage, buffs } = character;\n  let dam = Math.floor(\n    (1 + Number(percentModifier) / 100) * Number(base) + Number(flatDamage)\n  );\n  for (let i = 0; i < buffs.length; i++) {\n    dam *= 1 + buffs[i] / 100;\n    dam = Math.floor(dam);\n  }\n  return dam;\n};\n\nexport const createSpell = (): SpellType => ({\n  id: v4(),\n  name: \"Untitled\",\n  bases: [0],\n  damages: [0],\n});\n","import { CharacterType } from \"../types\";\nimport { parseBuffs, parseNum } from \"../utils\";\n\nexport type CharacterActions =\n  | { type: \"change_percent\"; value: string }\n  | { type: \"change_flat\"; value: string }\n  | {\n      type: \"change_buffs\";\n      value: string;\n    }\n  | {\n      type: \"load\";\n      character: CharacterType;\n    };\n\nexport const characterReducer = (\n  state: CharacterType,\n  action: CharacterActions\n): CharacterType => {\n  switch (action.type) {\n    case \"change_percent\": {\n      const newState = { ...state };\n      newState.percentModifier = parseNum(action.value);\n      return newState;\n    }\n    case \"change_flat\": {\n      const newState = { ...state };\n      newState.flatDamage = parseNum(action.value);\n\n      return newState;\n    }\n    case \"change_buffs\": {\n      const newState = { ...state };\n      newState.buffs = parseBuffs(action.value);\n      newState.buffsRaw = action.value;\n\n      return newState;\n    }\n    case \"load\": {\n      return action.character;\n    }\n    default: {\n      throw new Error(\"Error\");\n    }\n  }\n};\n","import React, { createContext, useEffect, useReducer, useState } from \"react\";\nimport {\n  CharacterActions,\n  characterReducer,\n} from \"../reducers/characterReducers\";\nimport { CharacterType } from \"../types\";\n\nconst initState: CharacterType = {\n  percentModifier: 0,\n  flatDamage: 0,\n  pierce: 0,\n  buffs: [],\n  buffsRaw: \"\",\n  shields: [],\n  sheldsRaw: \"\",\n};\n\nexport const CharacterContext = createContext<{\n  character: CharacterType;\n  dispatch: React.Dispatch<CharacterActions>;\n  loading: boolean;\n}>({ loading: false, character: initState, dispatch: () => null });\n\nexport const CharacterContextProvider: React.FC = ({ children }) => {\n  const [character, dispatch] = useReducer(characterReducer, initState);\n  const [loading, setLoading] = useState(true);\n\n  // Load character from storage\n  useEffect(() => {\n    const character_raw = localStorage.getItem(\"character\");\n    if (character_raw) {\n      const character_parsed: CharacterType = JSON.parse(character_raw);\n      dispatch({ type: \"load\", character: character_parsed });\n    }\n    setLoading(false);\n  }, []);\n\n  // Save character to storage\n  useEffect(() => {\n    localStorage.setItem(\"character\", JSON.stringify(character));\n  }, [character]);\n\n  return (\n    <CharacterContext.Provider value={{ loading, character, dispatch }}>\n      {children}\n    </CharacterContext.Provider>\n  );\n};\n","import { Stack, StackProps } from \"@chakra-ui/core\";\nimport React from \"react\";\ntype CardFooter = {} & StackProps;\n\nexport const CardFooter: React.FC<CardFooter> = ({ children, ...props }) => {\n  return (\n    <Stack spacing=\"10px\" px=\"10px\" pb=\"10px\" pt=\"5px\" {...props}>\n      {children}\n    </Stack>\n  );\n};\n","import { Stack, StackProps } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport { BORDER, BORDER_COLOR } from \"../../constants\";\ntype CardHeader = {} & StackProps;\n\nexport const CardHeader: React.FC<CardHeader> = ({ children, ...props }) => {\n  return (\n    <Stack\n      p=\"10px\"\n      borderBottom={BORDER}\n      borderColor={BORDER_COLOR}\n      spacing=\"10px\"\n      {...props}\n    >\n      {children}\n    </Stack>\n  );\n};\n","import { Stack, StackProps } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport { BORDER, BORDER_COLOR } from \"../../constants\";\n\nexport const CardItem: React.FC<StackProps> = ({ children, ...props }) => {\n  return (\n    <Stack\n      spacing=\"5px\"\n      px=\"10px\"\n      pb=\"10px\"\n      mb=\"5px\"\n      borderBottom={BORDER}\n      borderColor={BORDER_COLOR}\n      {...props}\n    >\n      {children}\n    </Stack>\n  );\n};\n","import { Box, Input, InputProps, Text } from \"@chakra-ui/core\";\nimport React from \"react\";\n\nexport const LabelNumber: React.FC<InputProps> = ({ children, ...props }) => {\n  return (\n    <Box>\n      <Text>{children}</Text>\n      <Input\n        type=\"number\"\n        onFocus={(event: React.FocusEvent<HTMLInputElement>) => {\n          event.target.select();\n        }}\n        {...props}\n      ></Input>\n    </Box>\n  );\n};\n","import { Button, Text, Textarea } from \"@chakra-ui/core\";\nimport React, { useContext } from \"react\";\nimport { CharacterContext } from \"../contexts/CharacterContext\";\nimport { CardFooter } from \"./Card/CardFooter\";\nimport { CardHeader } from \"./Card/CardHeader\";\nimport { CardItem } from \"./Card/CardItem\";\nimport { CardWrapper } from \"./Card/CardWrapper\";\nimport { LabelNumber } from \"./LabelNumber\";\n\ntype MainCardProps = {};\n\nexport const MainCard: React.FC<MainCardProps> = () => {\n  const { loading, character, dispatch } = useContext(CharacterContext);\n  return (\n    <CardWrapper>\n      <CardHeader>\n        <Text textAlign=\"center\" fontSize=\"20px\">\n          Character Stats\n        </Text>\n      </CardHeader>\n      <CardItem>\n        <LabelNumber\n          isDisabled={loading}\n          value={character.percentModifier}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            event.preventDefault();\n            dispatch({ type: \"change_percent\", value: event.target.value });\n          }}\n        >\n          Percent Modifier\n        </LabelNumber>\n        <LabelNumber\n          isDisabled={loading}\n          value={character.flatDamage}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            event.preventDefault();\n            dispatch({ type: \"change_flat\", value: event.target.value });\n          }}\n        >\n          Flat Damage\n        </LabelNumber>\n      </CardItem>\n      <CardItem>\n        <Text fontSize=\"20px\" textAlign=\"center\">\n          + / - Charms\n        </Text>\n      </CardItem>\n      <CardFooter>\n        <Textarea\n          isDisabled={loading}\n          height=\"212px\"\n          resize=\"vertical\"\n          placeholder=\"[percent] [name]\"\n          value={character.buffsRaw}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            dispatch({ type: \"change_buffs\", value: event.target.value });\n          }}\n        />\n        <Button\n          onClick={() => dispatch({ type: \"change_buffs\", value: \"\" })}\n          isDisabled={loading}\n          mx=\"auto\"\n          w=\"40%\"\n        >\n          Clear\n        </Button>\n      </CardFooter>\n    </CardWrapper>\n  );\n};\n","import { SpellType } from \"../types\";\nimport { createSpell } from \"../utils\";\n\nexport type SpellsAction =\n  | {\n      type: \"add_spell\";\n    }\n  | {\n      type: \"delete_spell\";\n      index: number;\n    }\n  | {\n      type: \"update_spell\";\n      spell: SpellType;\n      index: number;\n    }\n  | {\n      type: \"load\";\n      spells: SpellType[];\n    };\n\nexport const spellsReducer = (\n  state: SpellType[],\n  action: SpellsAction\n): SpellType[] => {\n  switch (action.type) {\n    case \"add_spell\": {\n      return [...state, createSpell()];\n    }\n    case \"delete_spell\": {\n      const newState = [];\n\n      for (let i = 0; i < state.length; i++) {\n        if (action.index !== i) {\n          newState.push(state[i]);\n        }\n      }\n\n      return newState;\n    }\n    case \"update_spell\": {\n      const newState = [...state];\n      newState[action.index] = action.spell;\n\n      return newState;\n    }\n    case \"load\": {\n      return action.spells;\n    }\n    default: {\n      throw new Error(\"Error\");\n    }\n  }\n};\n","import React, { createContext, useEffect, useReducer, useState } from \"react\";\nimport { SpellsAction, spellsReducer } from \"../reducers/spellsReducer\";\nimport { SpellType } from \"../types\";\n\nexport const SpellsContext = createContext<{\n  spells: SpellType[];\n  dispatch: React.Dispatch<SpellsAction>;\n  loading: boolean;\n}>({ loading: false, spells: [], dispatch: () => null });\n\nexport const SpellsContextProvider: React.FC = ({ children }) => {\n  const [spells, dispatch] = useReducer(spellsReducer, []);\n  const [loading, setLoading] = useState(true);\n\n  // Load spells from storage\n  useEffect(() => {\n    const spells_raw = localStorage.getItem(\"spells\");\n    if (spells_raw) {\n      const spells_parsed: SpellType[] = JSON.parse(spells_raw);\n      dispatch({ type: \"load\", spells: spells_parsed });\n    }\n    setLoading(false);\n  }, []);\n\n  // Save spells to storage\n  useEffect(() => {\n    localStorage.setItem(\"spells\", JSON.stringify(spells));\n  }, [spells]);\n\n  return (\n    <SpellsContext.Provider value={{ loading, spells, dispatch }}>\n      {children}\n    </SpellsContext.Provider>\n  );\n};\n","import { CharacterType, SpellType } from \"../types\";\nimport { parseNum, calculateAllSpell } from \"../utils\";\n\nexport type SpellActions =\n  | {\n      type: \"change_name\";\n      name: string;\n    }\n  | {\n      type: \"change_base\";\n      index: number;\n      value: string;\n    }\n  | {\n      type: \"add_base\";\n    }\n  | {\n      type: \"delete_base\";\n      index: number;\n    }\n  | {\n      type: \"calculate\";\n      character: CharacterType;\n    }\n  | {\n      type: \"toggle_enchantment\";\n    }\n  | {\n      type: \"toggle_enchantment_calculation\";\n    }\n  | {\n      type: \"change_enchantment\";\n      value: string;\n    }\n  | {\n      type: \"toggle_increment\";\n    }\n  | {\n      type: \"change_increment\";\n      pips?: string;\n      base?: string;\n    }\n  | {\n      type: \"delete_spell\";\n    };\n\nexport const spellReducer = (\n  state: SpellType,\n  action: SpellActions\n): SpellType => {\n  switch (action.type) {\n    case \"change_name\": {\n      return { ...state, name: action.name };\n    }\n    case \"add_base\": {\n      const bases = [...state.bases];\n      const damages = [...state.damages];\n      bases.push(0);\n      damages.push(0);\n      return { ...state, bases, damages };\n    }\n    case \"change_base\": {\n      const bases = [...state.bases];\n      bases[action.index] = parseNum(action.value);\n      return { ...state, bases };\n    }\n    case \"delete_base\": {\n      const bases = [];\n      const damages = [];\n      for (let i = 0; i < state.bases.length; i++) {\n        if (action.index !== i) {\n          bases.push(state.bases[i]);\n          damages.push(state.damages[i]);\n        }\n      }\n      return { ...state, bases, damages };\n    }\n    case \"calculate\": {\n      const newState = { ...state };\n      calculateAllSpell(newState, action.character);\n      return newState;\n    }\n    case \"toggle_enchantment\": {\n      return {\n        ...state,\n        enchantment:\n          state.enchantment === undefined\n            ? { base: 300, enabled: true }\n            : undefined,\n      };\n    }\n    case \"toggle_enchantment_calculation\": {\n      if (state.enchantment === undefined) return state;\n      return {\n        ...state,\n        enchantment: {\n          ...state.enchantment,\n          enabled: !state.enchantment.enabled,\n        },\n      };\n    }\n    case \"change_enchantment\": {\n      if (state.enchantment === undefined) return state;\n      return {\n        ...state,\n        enchantment: {\n          ...state.enchantment,\n          base: parseNum(action.value),\n        },\n      };\n    }\n    case \"toggle_increment\": {\n      return {\n        ...state,\n        increment:\n          state.increment === undefined\n            ? {\n                base: 0,\n                pips: 1,\n              }\n            : undefined,\n      };\n    }\n    case \"change_increment\": {\n      if (state.increment === undefined) return state;\n\n      const increment = { ...state.increment };\n      if (action.base !== undefined) {\n        increment.base = parseNum(action.base);\n      }\n      if (action.pips !== undefined) {\n        increment.pips = parseNum(action.pips);\n      }\n\n      return { ...state, increment };\n    }\n    case \"delete_spell\": {\n      return { ...state, _delete: true };\n    }\n    default: {\n      throw new Error(\"Error\");\n    }\n  }\n};\n","import { IconButton, IconButtonProps } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport { AiOutlineClose } from \"react-icons/ai\";\n\nexport const CloseButton: React.FC<IconButtonProps> = ({ ...props }) => {\n  return <IconButton {...props} fontSize=\"24px\" icon={AiOutlineClose} />;\n};\n","import {\n  Box,\n  Button,\n  Checkbox,\n  Flex,\n  IconButton,\n  Input,\n  Text,\n} from \"@chakra-ui/core\";\nimport React, { useState } from \"react\";\nimport { AiOutlineEdit } from \"react-icons/ai\";\nimport { useSpell } from \"../hooks/UseSpell\";\nimport { SpellType } from \"../types\";\nimport { CardFooter } from \"./Card/CardFooter\";\nimport { CardHeader } from \"./Card/CardHeader\";\nimport { CardItem } from \"./Card/CardItem\";\nimport { CardWrapper } from \"./Card/CardWrapper\";\nimport { CloseButton } from \"./CloseButton\";\nimport { LabelNumber } from \"./LabelNumber\";\n\ntype SpellCardProps = {\n  spell: SpellType;\n  index: number;\n};\n\nexport const SpellCard: React.FC<SpellCardProps> = ({ spell, index }) => {\n  const dispatch = useSpell(spell, index);\n  const [editmode, setEditmode] = useState(false);\n\n  return (\n    <CardWrapper>\n      <CardHeader p=\"5px\">\n        <Flex>\n          <Flex>\n            <IconButton\n              aria-label=\"edit\"\n              variant=\"ghost\"\n              isActive={editmode}\n              fontSize=\"24px\"\n              title=\"Click for edit mode or Shift+Click to delete spell\"\n              onClick={(event: React.MouseEvent<any, MouseEvent>) => {\n                if (event.shiftKey) {\n                  dispatch({ type: \"delete_spell\" });\n                } else {\n                  setEditmode(!editmode);\n                }\n              }}\n              mr=\"5px\"\n              icon={AiOutlineEdit}\n            />\n          </Flex>\n          <Flex>\n            <Input\n              textAlign=\"center\"\n              fontSize=\"20px\"\n              mr=\"5px\"\n              border=\"none\"\n              spellCheck=\"false\"\n              value={spell.name}\n              onFocus={(event: React.ChangeEvent<HTMLInputElement>) => {\n                event.target.select();\n              }}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                event.preventDefault();\n                dispatch({ type: \"change_name\", name: event.target.value });\n              }}\n            />\n          </Flex>\n          <Flex>\n            {editmode && (\n              <CloseButton\n                variantColor=\"red\"\n                aria-label=\"close\"\n                title=\"Delete spell\"\n                onClick={() => dispatch({ type: \"delete_spell\" })}\n              />\n            )}\n          </Flex>\n        </Flex>\n      </CardHeader>\n      {editmode && (\n        <CardItem mt=\"5px\" spacing=\"8px\" isInline={true}>\n          <Button\n            w=\"33%\"\n            onClick={() => dispatch({ type: \"add_base\" })}\n            title=\"Add base to spell\"\n          >\n            B\n          </Button>\n          <Button\n            w=\"33%\"\n            onClick={() => dispatch({ type: \"toggle_enchantment\" })}\n            isActive={spell.enchantment !== undefined}\n            title=\"Toggle enchantment\"\n          >\n            E\n          </Button>\n          <Button\n            w=\"33%\"\n            onClick={() => dispatch({ type: \"toggle_increment\" })}\n            isActive={spell.increment !== undefined}\n            title=\"Toggle increment\"\n          >\n            I\n          </Button>\n        </CardItem>\n      )}\n      {spell.enchantment !== undefined ? (\n        <CardItem>\n          <Flex>\n            <LabelNumber\n              isDisabled={!spell.enchantment.enabled}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                dispatch({\n                  type: \"change_enchantment\",\n                  value: event.target.value,\n                });\n              }}\n              value={spell.enchantment.base}\n            >\n              <Flex mb=\"5px\">\n                <Checkbox\n                  isChecked={spell.enchantment.enabled}\n                  title=\"Enable or disable enchantment in damage calculation\"\n                  onChange={() =>\n                    dispatch({ type: \"toggle_enchantment_calculation\" })\n                  }\n                  mr=\"5px\"\n                  size=\"lg\"\n                />\n                <Text>Enchantment</Text>\n              </Flex>\n            </LabelNumber>\n          </Flex>\n        </CardItem>\n      ) : null}\n      {spell.increment !== undefined ? (\n        <CardItem>\n          <Flex>\n            <Box pr=\"10px\">\n              <LabelNumber\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  dispatch({\n                    type: \"change_increment\",\n                    pips: event.target.value,\n                  });\n                }}\n                value={spell.increment.pips}\n              >\n                Pips\n              </LabelNumber>\n            </Box>\n            <LabelNumber\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                dispatch({\n                  type: \"change_increment\",\n                  base: event.target.value,\n                });\n              }}\n              value={spell.increment.base}\n            >\n              Base\n            </LabelNumber>\n          </Flex>\n        </CardItem>\n      ) : null}\n      <CardFooter>\n        {spell.bases.map((value, index) => {\n          return (\n            <Flex key={index}>\n              {editmode && (\n                <CloseButton\n                  variant=\"ghost\"\n                  mr=\"10px\"\n                  aria-label=\"close\"\n                  title=\"Delete base\"\n                  onClick={() => dispatch({ type: \"delete_base\", index })}\n                />\n              )}\n              <Flex w=\"50%\">\n                <LabelNumber\n                  value={value}\n                  title=\"Base damage\"\n                  onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                    event.preventDefault();\n                    dispatch({\n                      type: \"change_base\",\n                      index,\n                      value: event.target.value,\n                    });\n                  }}\n                ></LabelNumber>\n              </Flex>\n              <Flex ml=\"auto\">\n                <Text\n                  flexWrap=\"wrap\"\n                  wordBreak=\"break-word\"\n                  my=\"auto\"\n                  ml=\"auto\"\n                  fontSize=\"18px\"\n                  fontWeight=\"bold\"\n                >\n                  {spell.damages[index].toLocaleString(\"en\", {\n                    useGrouping: true,\n                  })}\n                </Text>\n              </Flex>\n            </Flex>\n          );\n        })}\n      </CardFooter>\n    </CardWrapper>\n  );\n};\n","import React, { useContext, useEffect } from \"react\";\nimport { CharacterContext } from \"../contexts/CharacterContext\";\nimport { SpellsContext } from \"../contexts/SpellsContext\";\nimport { spellReducer } from \"../reducers/spellReducer\";\nimport { SpellType } from \"../types\";\n\nexport const useSpell = (spell: SpellType, index: number) => {\n  const { dispatch: spellsDispatch } = useContext(SpellsContext);\n  const { character } = useContext(CharacterContext);\n\n  const [newSpell, dispatch] = React.useReducer(spellReducer, spell);\n\n  // Update spell in the manager\n  useEffect(() => {\n    if (newSpell._delete === true) {\n      spellsDispatch({ type: \"delete_spell\", index: index });\n    } else {\n      spellsDispatch({ type: \"update_spell\", index: index, spell: newSpell });\n    }\n  }, [newSpell, spellsDispatch, index]);\n\n  // Calculate spell\n  useEffect(() => {\n    dispatch({ type: \"calculate\", character });\n  }, [character, newSpell.bases, newSpell.enchantment, newSpell.increment]);\n\n  return dispatch;\n};\n","import { Box, Flex, Heading, IconButton, Spinner } from \"@chakra-ui/core\";\nimport React, { useContext } from \"react\";\nimport { CardWrapper } from \"./components/Card/CardWrapper\";\nimport { MainCard } from \"./components/MainCard\";\nimport { SpellCard } from \"./components/SpellCard\";\nimport { MAX_SPELLS } from \"./constants\";\nimport { SpellsContext } from \"./contexts/SpellsContext\";\n\nconst App: React.FC = () => {\n  const { spells, dispatch, loading } = useContext(SpellsContext);\n\n  const spellCards = spells.map((value, index) => {\n    return (\n      <Flex key={value.id} mb=\"auto\" pb=\"20px\" w=\"206px\" mr=\"20px\">\n        <SpellCard spell={value} index={index} />\n      </Flex>\n    );\n  });\n\n  const spellSection = (\n    <>\n      {spellCards}\n      <Flex minH=\"100px\" pb=\"20px\" w=\"216px\" mr=\"10px\">\n        {spells.length < MAX_SPELLS && (\n          <IconButton\n            variantColor=\"blue\"\n            boxShadow=\"md\"\n            m=\"auto\"\n            aria-label=\"Add Spellcard\"\n            icon=\"add\"\n            onClick={() => {\n              dispatch({ type: \"add_spell\" });\n            }}\n          />\n        )}\n      </Flex>\n    </>\n  );\n\n  return (\n    <Box minW=\"430px\" maxW=\"900px\" pl=\"20px\" mx=\"auto\">\n      <CardWrapper py=\"10px\" mr=\"20px\" my=\"20px\">\n        <Heading color=\"gray.900\" textAlign=\"center\" size=\"xl\">\n          Wiz Calculator 2\n        </Heading>\n      </CardWrapper>\n      <Box>\n        <Box float=\"left\" minW=\"181px\" w=\"181px\" mr=\"20px\">\n          <Box mb=\"20px\">\n            <MainCard />\n          </Box>\n        </Box>\n        <Flex wrap=\"wrap\">\n          {loading ? <Spinner mx=\"auto\" /> : spellSection}\n        </Flex>\n      </Box>\n    </Box>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { DefaultTheme, theme } from \"@chakra-ui/core\";\n\nexport const customTheme: DefaultTheme = {\n  ...theme,\n};\n\nexport default customTheme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { CSSReset, ThemeProvider } from \"@chakra-ui/core\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport customTheme from \"./theme\";\nimport { SpellsContextProvider } from \"./contexts/SpellsContext\";\nimport { CharacterContextProvider } from \"./contexts/CharacterContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={customTheme}>\n      <CSSReset />\n      <CharacterContextProvider>\n        <SpellsContextProvider>\n          <App />\n        </SpellsContextProvider>\n      </CharacterContextProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}